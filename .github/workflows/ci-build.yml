name: CI Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - '*'

permissions:
  contents: write
  packages: write

jobs:
  clone-and-find-tag:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.bump.outputs.new_version }} 

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

        # See: https://github.com/marketplace/actions/semver-bump-action
      - name: Get Latest Tag
        id: current
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=taggerdate | tail -n 1)
          echo "current version is: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        
      - name: Bump Minor Version
        id: bump
        uses: cbrgm/semver-bump-action@main
        with:
          current-version: ${{ steps.current.outputs.latest_tag }}
          bump-level: minor


  mainline-build:
    needs: clone-and-find-tag
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/arlaneenalra/watcom-docker

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Build and package everything
        run: |
          ./scripts/write-version.sh "${{ needs.clone-and-find-tag.outputs.new_version }}"

          make -j 5 WATCOM_DOCKER=  dist

  tag-release:
    runs-on: ubuntu-latest

    needs:
      - mainline-build
      - clone-and-find-tag

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Tag new release 
        run: |
          git config --global user.email "release-bot@thenextbug.com"
          git config --global user.name "release-bot"
          git commit -a -m "Tagging version ${{ needs.clone-and-find-tag.outputs.new_version }}"
          git tag ${{ needs.clone-and-find-tag.outputs.new_version }}
          git push --tags

      - name: Create release and upload artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}

        run: gh release create ${{ needs.clone-and-find-tag.outputs.new_version }} --generate-notes --prerelease *.zip

      
